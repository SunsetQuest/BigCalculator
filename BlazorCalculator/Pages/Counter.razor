@page "/counter"
@using System.Numerics;
@using System.Text.RegularExpressions
@using BigFloatLibrary;

<PageTitle>Counter</PageTitle>

<style>
    .myNumericTextbox .k-input-inner,
    .myCombobox .k-input-inner {
        text-align: right;
    }

    .myTextbox .k-input-inner {
        text-align: center;
    }
</style>


<h1>Multiply6</h1>


<div class="container">
    <div>
        <h5>Input A</h5>
        <div>
            <input type="text" class="w-100 " style="text-align: right;" 
            @bind-value="@inputAString" 
            @onkeydown="@(e => {VerifyValidKey(e);})" 
            @onkeydown:preventDefault="preventDefault" 
            @onkeyup="@(e => {KeyUpHandlerA(e); Calculate();})" 
            @bind-value:event="oninput"
            />
            <br />Dec:@inputA Bits:@(BitOperations.Log2((uint)inputA)+1)
        </div>
        
        <h5>Input B</h5>
        <div>
            <input type="text" class="w-100 " style="text-align: right;" 
            @bind-value="@inputBString" 
            @onkeydown="@(e => {VerifyValidKey(e);})" 
            @onkeydown:preventDefault="preventDefault" 
            @onkeyup="@(e => {KeyUpHandlerB(e); Calculate();})" 
            @bind-value:event="oninput"
            />
            <br />RawMantissa:@inputB.RawMantissa Size:@inputB.Size  Scale:@inputB.Scale BinExp:@inputB.BinaryExponent
        </div>
                
        <h5>Result</h5>
        <div>
            <input type="text" class="w-100" style="text-align: right;" value="@resultString" @oninput="@(e => {resultString = Regex.Replace((e.Value ?? "").ToString() ?? "" , @"[^01]", ""); Calculate();})" />
            <br />Dec:@result Bits:@(BitOperations.Log2((uint)result)+1)
        </div>
    </div>
</div>

<button class="btn btn-primary" @bind:event="Add">+</button>




@code {

    private string inputAString = "111"; 
    private string inputAValid = "111"; 
    private string inputBString = "111";
    private string inputBValid = "111";
    private string resultString = "111";

    bool preventDefault = false;

    BigFloat inputA = 7;
    BigFloat inputB = 7;
    BigFloat result = 14;



    private void Calculate()//ChangeEventArgs args
    {
        
        //result = (Math.Max(inputA,inputB)+1)/2;

        var result = inputA + inputB;

        resultString = result.ToString();
    }

    private void VerifyValidKey(KeyboardEventArgs e)
    {
        // Lets first check to see if the e.Key is valid.
        bool validKey = "01.-".Contains(e.Key) 
            || e.Key == "Backspace" || e.Key == "Delete"
            || e.Key == "ArrowLeft" || e.Key == "ArrowRight"
            || e.Key == "ArrowUp" || e.Key == "ArrowDown"
            || e.Key == "Home" || e.Key == "End"
            || e.Key == "Tab" || e.Key == "Enter";
        preventDefault = !validKey;

    }

    private void KeyUpHandlerA(KeyboardEventArgs e)
    {
        // If the key was valid, we should now check the entire validFormat (like for two periods in a decimal number)
        bool validFormat = BigFloat.TryParse(inputAString, out var res);
        if (validFormat)
        {
            inputAValid = inputAString;
            inputA = res;
        }
        else
        {
            inputAString = inputAValid;
        }
    }

    private void KeyUpHandlerB(KeyboardEventArgs e)
    {
        // If the key was valid, we should now check the entire validFormat (like for two periods in a decimal number)
        bool validFormat = BigFloat.TryParse(inputBString, out var res);
        if (validFormat)
        {
            inputBValid = inputBString;
            inputB = res;
        }
        else
        {
            inputBString = inputBValid;
        }
    }

}

