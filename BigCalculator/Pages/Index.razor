@page "/"
@using System.Numerics;
@using System.Text.RegularExpressions
@using BigFloatLibrary;
@using MudBlazor.Internal

@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<PageTitle>Big Number Calculator</PageTitle>

<!-- Error Display -->
@if (hasCalculationError)
{
    <MudAlert Severity="Severity.Error" Class="ma-2" ShowCloseIcon="true" CloseIconClicked="() => { hasCalculationError = false; errorMessage = string.Empty; }">
        @errorMessage
    </MudAlert>
}

<MudPaper Class="pa-4 pa-sm-8 pa-md-16 ma-2" Elevation="3">
    <!-- Input A -->
    <MudPaper Elevation="1" Class="d-flex align-center justify-center ma-2 ma-md-4">
        <MudTextField Lines="3"
                      OnDebounceIntervalElapsed="CalculateAsync"
                      DebounceInterval="500"
                      Error="@inputAInvalidFormat"
                      ErrorText="@(inputAInvalidFormat ? $"Invalid {inputAType} format" : "")"
                      @bind-Value="@inputAString"
                      HelperText="@GetInputHelperText(inputA, inputAType)"
                      Label="Input A"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@inputATypeIcon"
                      OnAdornmentClick="InputABaseSelectClick"
                      AdornmentAriaLabel="Select Base"
                      Class="mud-input-large">
        </MudTextField>
    </MudPaper>

    @if (NeedsB)
    {
        <!-- Input B -->
        <MudPaper Elevation="1" Class="d-flex align-center justify-center ma-2 ma-md-4">
            <MudTextField Lines="3"
                          OnDebounceIntervalElapsed="CalculateAsync"
                          DebounceInterval="500"
                          Error="@inputBInvalidFormat"
                          ErrorText="@(inputBInvalidFormat ? $"Invalid {inputBType} format" : "")"
                          @bind-Value="@inputBString"
                          HelperText="@GetInputHelperText(inputB, inputBType)"
                          Label="Input B"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.End"
                          AdornmentIcon="@inputBTypeIcon"
                          OnAdornmentClick="InputBBaseSelectClick"
                          AdornmentAriaLabel="Select Base"
                          Class="mud-input-large">
            </MudTextField>
        </MudPaper>
    }

    <!-- Operations Section - Improved Responsive Layout -->
    <MudPaper Elevation="1" Class="pa-3 ma-2 ma-md-4">
        <MudGrid Spacing="2" AlignItems="Center">
            <!-- Basic Operations Toggle Group -->
            <MudItem xs="12" sm="8" md="7" lg="8" Class="d-flex align-center">
                <MudToggleGroup T="Op" @bind-Value="op"
                                Color="Color.Primary"
                                SelectionMode="SelectionMode.SingleSelection"
                                Rounded="true"
                                Size="Size.Large"
                                Class="w-100">
                    @foreach (var val in Enum.GetValues<Op>()[..5])
                    {
                        <MudToggleItem Value="val" Text="@OpSymb[(int)val]" />
                    }
                </MudToggleGroup>
            </MudItem>

            <!-- Advanced Operations Select -->
            <MudItem xs="12" sm="4" md="2" lg="2" Class="d-flex align-center">
                <MudSelect T="Op"
                           @bind-Value="op"
                           Dense="false"
                           Variant="Variant.Outlined"
                           Label="More Operations"
                           AnchorOrigin="Origin.BottomCenter"
                           Class="w-100">
                    @foreach (var val in Enum.GetValues<Op>()[5..])
                    {
                        <MudSelectItem Value="val">@($"{OpSymb[(int)val]}")</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <!-- Precision Control -->
            <MudItem xs="12" sm="4" md="3" lg="2" Class="d-flex align-center">
                <MudSelect T="string"
                           @bind-Value="precisionMode"
                           @bind-Value:after="@(() => _ = CalculateAsync(""))"
                           Label="Precision"
                           Variant="Variant.Outlined"
                           Dense="true"
                           Class="w-100">
                           <!--HelperText="@GetPrecisionHelperText()"> -->
                    @foreach (var option in precisionOptions)
                    {
                        <MudSelectItem Value="option">
                            <MudTooltip Text="@GetPrecisionTooltip(option)" Placement="Placement.Left">
                                <span>
                                    @(char.IsLetter(option[0]) || option.Length > 4 ? option : $"{option} bits")
                                </span>
                            </MudTooltip>
                        </MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <!-- Processing Indicator -->
            @if (_processing)
            {
                <MudItem xs="12" md="1" Class="d-flex justify-center align-center">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                </MudItem>
            }
        </MudGrid>
    </MudPaper>

    <!-- Result -->
    <MudPaper Elevation="1" Class="ma-2 ma-md-4" Style="position: relative;">
        <MudGrid AlignItems="Center" Spacing="0">
            <MudItem xs="11">
                <MudTextField Lines="3"
                              @bind-Value="@resultString"
                              HelperText="@GetResultHelperText()"
                              Label="Result"
                              Variant="Variant.Filled"
                              ReadOnly="true"
                              Class="mud-input-large result-field">
                </MudTextField>
            </MudItem>
            <MudItem xs="1" Class="d-flex justify-center align-center" Style="height: 100%;">
                <MudStack Spacing="0" Style="gap: 1px;" AlignItems="AlignItems.Center">
                    <MudIconButton Icon="@Icons.Material.Filled.ContentCopy"
                                   OnClick="CopyResultToClipboard"
                                   Title="Copy to clipboard"
                                   Size="Size.Small"
                                   Style="width: 24px; height: 24px; min-height: 24px;" />
                    <MudButton Variant="Variant.Text"
                               OnClick="ResultBaseSelectClick"
                               Title="Change base format"
                               Size="Size.Small"
                               Style="width: 24px; height: 24px; min-height: 24px; padding: 2px;">
                        @((MarkupString)resultTypeIcon)
                    </MudButton>
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Quick Actions -->
    <MudPaper Class="pa-3 ma-2 ma-md-4" Elevation="1">
        <MudStack Row="true" Spacing="2" Wrap="Wrap.Wrap" Justify="Justify.Center" Class="d-flex flex-wrap">
            <MudButton OnClick="ClearAll" StartIcon="@Icons.Material.Filled.Clear" Color="Color.Warning" Size="Size.Small">
                Clear All
            </MudButton>
            <MudButton OnClick="SwapInputs" StartIcon="@Icons.Material.Filled.SwapVert" Color="Color.Info" Disabled="@(!NeedsB)" Size="Size.Small">
                Swap A ↔ B
            </MudButton>
            <MudButton OnClick="CopyResultToA" StartIcon="@Icons.Material.Filled.Input" Color="Color.Primary" Disabled="@(string.IsNullOrEmpty(resultString) || resultString == "Error")" Size="Size.Small">
                Result → A
            </MudButton>
        </MudStack>
    </MudPaper>
</MudPaper>

<!-- Enhanced History Section with Better Responsive Layout -->
<MudPaper Class="pa-4 pa-sm-8 pa-md-16 ma-2" Elevation="3">
    <MudText Typo="Typo.h6" Class="mb-4">Calculation History</MudText>
    <MudStack Reverse="true" Spacing="2">
        @foreach (var (result, index) in resultHistories.Select((r, i) => (r, i)))
        {
            <MudPaper Class="pa-3" Elevation="1">
                <MudGrid AlignItems="Center" Spacing="2">
                    <MudItem xs="12" sm="8" md="9">
                        <MudText Class="font-monospace text-truncate" Style="overflow-wrap: break-word; word-break: break-all; font-size: 0.875rem;">
                            @result
                        </MudText>
                    </MudItem>
                    <MudItem xs="12" sm="4" md="3">
                        <MudStack Row="true" Spacing="1" Justify="Justify.FlexEnd" Class="flex-wrap">
                            <MudButton StartIcon="@Icons.Material.Filled.Input"
                                       Color="Color.Primary"
                                       Size="Size.Small"
                                       Variant="Variant.Outlined"
                                       OnClick="() => TransferToInputA(result)">
                                → A
                            </MudButton>
                            <MudButton StartIcon="@Icons.Material.Filled.Input"
                                       Color="Color.Secondary"
                                       Size="Size.Small"
                                       Variant="Variant.Outlined"
                                       OnClick="() => TransferToInputB(result)"
                                       Disabled="@(!NeedsB)">
                                → B
                            </MudButton>
                            <MudButton StartIcon="@Icons.Material.Filled.Delete"
                                       Color="Color.Error"
                                       Size="Size.Small"
                                       Variant="Variant.Outlined"
                                       OnClick="() => RemoveFromHistory(index)">
                                ×
                            </MudButton>
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        }
        @if (!resultHistories.Any())
        {
            <MudAlert Severity="Severity.Info" Class="ma-2">
                <MudText>No calculations performed yet. Results will appear here.</MudText>
            </MudAlert>
        }
    </MudStack>
</MudPaper>

@code {
    // Convert Queue to List for better manipulation
    List<string> resultHistories = new List<string>();

    // Precision Control Variables
    private string precisionMode = "Auto";
    private readonly List<string> precisionOptions = new List<string>
    {
        "Auto",
        "Auto-Full",
        "16",
        "32",
        "64",
        "128",
        "256",
        "512",
        "1024",
        "2048",
        "4096",
        "8192",
        "16K",
        "32K",
        "64K",
        "128K",
        "256K",
        "512K",
        "1M"
    };


    // UI Action Methods

    private void TransferToInputA(string value)
    {
        // Lets transfer anything after the "=" in value to inputAString
        inputAString = value.Split('=').Last().Trim();

        _ = CalculateAsync("");
        StateHasChanged();
    }

    private void TransferToInputB(string value)
    {
        //if (NeedsB)
        {
            // Lets transfer anything after the "=" in value to inputAString
            inputBString = value.Split('=').Last().Trim();
            _ = CalculateAsync("");
            StateHasChanged();
        }
    }

    private void RemoveFromHistory(int index)
    {
        if (index >= 0 && index < resultHistories.Count)
        {
            resultHistories.RemoveAt(index);
            StateHasChanged();
        }
    }
}


<style>
    .mud-input-large .mud-input-control {
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        font-size: 1.1em;
    }

    .result-field .mud-input-control {
        background-color: var(--mud-palette-background-grey);
        font-weight: 500;
    }

    .history-item:hover {
        background-color: var(--mud-palette-action-hover);
        transition: background-color 0.2s ease;
    }

    .mud-toggle-group .mud-toggle-item {
        min-width: 60px;
        font-weight: 600;
    }

    /* Mobile styles - using class-based approach instead of media queries */
    .mobile-small-text .mud-input-large .mud-input-control {
        font-size: 0.95em;
    }

    .mobile-small-text .font-monospace {
        font-size: 0.8rem !important;
    }

    .mobile-wrap .mud-toggle-group {
        flex-wrap: wrap;
    }

        .mobile-wrap .mud-toggle-group .mud-toggle-item {
            min-width: 50px;
            margin: 2px;
        }
</style>

@code {
    private bool _processing = false;
    private string errorMessage = "";
    private bool hasCalculationError = false;


    Base inputAType = Base.Dec;
    Base inputBType = Base.Dec;
    Base resultType = Base.Dec;

    enum Base
    {
        Bin,
        Dec,
        Hex
    }

    private enum Op
    {
        Add, Sub, Mul, Div,
        Pow,          // A^B
        Root,         // B√A   (i.e. A^(1/B))
        Sqrt, Log2, Log10, Ln, Exp,
        Abs, Neg,
        ShiftLeft, ShiftRight,
        Sin, Cos, Tan
    }

    string[] OpSymb = [
        "+", "-", "×", "÷",
        "^", "∜", "√", "log₂", "log₁₀", "ln", "eˣ",
        "|x|", "±", "<<", ">>",
        "sin", "cos", "tan"];

    private Op _op = Op.Add;

    private Op op
    {
        get { return _op; }
        set
        {
            _op = value;
            _ = CalculateAsync("");
        }
    }

    private bool NeedsB => _op is Op.Add or Op.Sub or Op.Mul or Op.Div or Op.Pow or Op.Root or Op.ShiftLeft or Op.ShiftRight;

    private string inputAString = "0";
    private bool inputAInvalidFormat = false;

    private string inputBString = "0";
    private bool inputBInvalidFormat = false;

    private string resultString = "0";

    BigFloat inputA = 0;
    BigFloat inputB = 0;
    BigFloat result = 0;

    private async Task CalculateAsync(string debouncedText)
    {
        if (_processing) return;

        _processing = true;
        StateHasChanged();

        await Task.Delay(50); // Small delay for UI responsiveness
        Calculate();
    }

    private void Calculate()
    {
        errorMessage = "";
        hasCalculationError = false;

        try
        {
            // Parse Input A with improved error handling
            bool inputAValid = inputAType switch
            {
                Base.Bin => BigFloat.TryParseBinary(inputAString?.Trim() ?? "", out inputA),
                Base.Dec => BigFloat.TryParseDecimal(inputAString?.Trim() ?? "", out inputA),
                Base.Hex => BigFloat.TryParseHex(inputAString?.Trim() ?? "", out inputA),
                _ => false
            };

            inputAInvalidFormat = !inputAValid;

            // Parse Input B with improved error handling
            bool inputBValid = true;
            if (NeedsB)
            {
                inputBValid = inputBType switch
                {
                    Base.Bin => BigFloat.TryParseBinary(inputBString?.Trim() ?? "", out inputB),
                    Base.Dec => BigFloat.TryParseDecimal(inputBString?.Trim() ?? "", out inputB),
                    Base.Hex => BigFloat.TryParseHex(inputBString?.Trim() ?? "", out inputB),
                    _ => false
                };

                inputBInvalidFormat = !inputBValid;
            }
            else
            {
                inputBInvalidFormat = false;
            }

            if (!inputAValid || (NeedsB && !inputBValid))
            {
                resultString = "";
                return;
            }

            // Apply precision control logic
            ApplyPrecisionControl();

            // Perform calculation with domain-specific validations
            result = _op switch
            {
                Op.Add => inputA + inputB,
                Op.Sub => inputA - inputB,
                Op.Mul => inputA * inputB,
                Op.Div => ValidateDivision(inputA, inputB),
                Op.Pow => ValidatePower(inputA, inputB),
                Op.Root => ValidateRoot(inputA, inputB),
                Op.Sqrt => ValidateSquareRoot(inputA),
                Op.Log2 => ValidateLogarithm(inputA),
                Op.Abs => BigFloat.Abs(inputA),
                Op.Neg => -inputA,
                Op.ShiftRight => ValidateShift(inputA, inputB, false),
                Op.ShiftLeft => ValidateShift(inputA, inputB, true),
                _ => throw new NotImplementedException($"Operation {_op} not implemented")
            };

            // Format result based on selected base
            resultString = resultType switch
            {
                Base.Bin => result.ToBinaryString(),
                Base.Dec => result.ToString(),
                Base.Hex => result.ToHexString(),
                _ => result.ToString()
            };

            // Add to history only if calculation succeeded
            if (!hasCalculationError)
            {
                var historyEntry = $"{FormatHistoryEntry()}";
                resultHistories.Insert(0, historyEntry);

                if (resultHistories.Count > 20) // Increased history size
                {
                    resultHistories.RemoveAt(resultHistories.Count - 1);
                }
            }
        }
        catch (Exception ex)
        {
            hasCalculationError = true;
            errorMessage = $"Calculation error: {ex.Message}";
            resultString = "Error";
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }

    private void ApplyPrecisionControl()
    {
        // Parse precision mode to get the numeric value if it's a fixed precision
        int? fixedPrecision = GetFixedPrecisionValue(precisionMode);

        if (fixedPrecision.HasValue)
        {
            // Fixed precision mode
            int precisionBits = fixedPrecision.Value;

            // Apply precision based on operation type
            if (_op is Op.Add or Op.Sub)
            {
                // For Add/Sub operations, we work with accuracy
                if (inputA.Accuracy < precisionBits)
                    inputA = BigFloat.ExtendPrecision(inputA, precisionBits - inputA.Accuracy);
                if (NeedsB && inputB.Accuracy < precisionBits)
                    inputB = BigFloat.ExtendPrecision(inputB, precisionBits - inputB.Accuracy);
            }
            else
            {
                // For Mul/Div/Pow operations, we work with precision
                if (inputA.Precision < precisionBits)
                    inputA = BigFloat.SetPrecision(inputA, precisionBits);
                if (NeedsB && inputB.Precision < precisionBits)
                    inputB = BigFloat.SetPrecision(inputB, precisionBits);
            }
        }
        else if (precisionMode == "Auto")
        {
            // Auto mode with special integer handling
            bool aIsInteger = inputA.IsInteger;
            bool bIsInteger = NeedsB ? inputB.IsInteger : false;

            if (NeedsB && aIsInteger && bIsInteger)
            {
                // Both are integers - keep as exact integers
                // BigFloat should handle this naturally
            }
            else if (NeedsB && (aIsInteger || bIsInteger))
            {
                // One is integer, one is not - match precision of non-integer
                if (aIsInteger && !bIsInteger)
                {
                    // A is integer, B is not - match A's precision to B's
                    inputA = BigFloat.SetPrecision(inputA, inputB.Precision);
                }
                else if (!aIsInteger && bIsInteger)
                {
                    // B is integer, A is not - match B's precision to A's
                    inputB = BigFloat.SetPrecision(inputB, inputA.Precision);
                }
            }
            // Otherwise let BigFloat use its default precision handling
        }
        else if (precisionMode == "Auto-Full")
        {
            // Match the longer input's precision
            if (NeedsB)
            {
                int maxPrecision = Math.Max(inputA.Precision, inputB.Precision);

                if (inputA.Precision < maxPrecision)
                    inputA = BigFloat.SetPrecision(inputA, maxPrecision);
                if (inputB.Precision < maxPrecision)
                    inputB = BigFloat.SetPrecision(inputB, maxPrecision);
            }
            // For single-input operations, keep the existing precision
        }
    }

    private int? GetFixedPrecisionValue(string mode)
    {
        if (mode == "Auto" || mode == "Auto-Full")
            return null;
        if (mode.EndsWith("K"))
        {
            // Handle kilobit values
            if (int.TryParse(mode.TrimEnd('K'), out int kilobits))
                return kilobits * 1024;
        }
        else if (mode.EndsWith("M"))
        {
            // Handle megabit values
            if (int.TryParse(mode.TrimEnd('M'), out int megabits))
                return megabits * 1024 * 1024;
        }
        else if (int.TryParse(mode, out int bits))
        {
            return bits;
        }

        return null;
    }

    private BigFloat ValidateDivision(BigFloat a, BigFloat b)
    {
        if (b == 0)
        {
            throw new DivideByZeroException("Division by zero is undefined");
        }
        return a / b;
    }

    private BigFloat ValidatePower(BigFloat a, BigFloat b)
    {
        if (!int.TryParse(inputBString, out int exponent))
        {
            throw new ArgumentException("Power operation requires integer exponent");
        }
        if (a == 0 && exponent < 0)
        {
            throw new ArgumentException("Cannot raise zero to negative power");
        }
        return BigFloat.Pow(a, exponent);
    }

    private BigFloat ValidateRoot(BigFloat a, BigFloat b)
    {
        if (!int.TryParse(inputBString, out int root))
        {
            throw new ArgumentException("Root operation requires integer root value");
        }
        if (root == 0)
        {
            throw new ArgumentException("Root cannot be zero");
        }
        if (a < 0 && root % 2 == 0)
        {
            throw new ArgumentException("Even root of negative number is not real");
        }
        return BigFloat.NthRoot(a, root);
    }

    private BigFloat ValidateSquareRoot(BigFloat a)
    {
        if (a < 0)
        {
            throw new ArgumentException("Square root of negative number is not real");
        }
        return BigFloat.Sqrt(a);
    }

    private BigFloat ValidateLogarithm(BigFloat a)
    {
        if (a <= 0)
        {
            throw new ArgumentException("Logarithm undefined for non-positive numbers");
        }
        return (BigFloat)BigFloat.Log2(a);
    }

    private BigFloat ValidateShift(BigFloat a, BigFloat b, bool leftShift)
    {
        if (!int.TryParse(inputBString, out int shiftAmount))
        {
            throw new ArgumentException("Shift operation requires integer shift amount");
        }
        if (Math.Abs(shiftAmount) > 1000000) // Reasonable limit
        {
            throw new ArgumentException("Shift amount too large");
        }
        return leftShift ? a << shiftAmount : a >> shiftAmount;
    }

    private string FormatHistoryEntry()
    {
        var aStr = FormatValueForHistory(inputAString, inputAType);
        var resultStr = FormatValueForHistory(resultString, resultType);

        if (NeedsB)
        {
            var bStr = FormatValueForHistory(inputBString, inputBType);
            return $"{aStr} {OpSymb[(int)_op]} {bStr} = {resultStr}";
        }
        else
        {
            return $"{OpSymb[(int)_op]}({aStr}) = {resultStr}";
        }
    }

    private string FormatValueForHistory(string value, Base baseType)
    {
        var prefix = baseType switch
        {
            Base.Bin => "0b",
            Base.Hex => "0x",
            _ => ""
        };
        return $"{prefix}{value}";
    }

    // Helper methods
    private string GetInputHelperText(BigFloat value, Base baseType)
    {
        if (value == 0) return $"{baseType} format";
        return $"Bits: {value.Size} | Precision: {value.Precision} | Accuracy: {value.Accuracy} | Scale: {value.Scale} | BinExp: {value.BinaryExponent}{(value.IsInteger ? "| IsInteger" : "")}{(value.FitsInADouble() ? "| FitsInADouble" : "")}{(value.IsOneBitFollowedByZeroBits ? "| IsOneBitFollowedByZeroBits" : "")}";
    }

    private string GetResultHelperText()
    {
        if (result == 0 || hasCalculationError) return $"{resultType} format";

        string baseInfo = $"Bits: {result.Size} | Precision: {result.Precision} | Accuracy: {result.Accuracy} | Scale: {result.Scale} | BinExp: {result.BinaryExponent}";
        string flags = $"{(result.IsInteger ? "| IsInteger" : "")}{(result.FitsInADouble() ? "| FitsInADouble" : "")}{(result.IsOneBitFollowedByZeroBits ? "| IsOneBitFollowedByZeroBits" : "")}";
        string modeInfo = $" | Mode: {precisionMode}";

        return baseInfo + flags + modeInfo;
    }

    private string GetPrecisionHelperText()
    {
        return precisionMode switch
        {
            "Auto" => "Automatic precision with smart integer handling",
            "Auto-Full" => "Match precision of the longer input",
            _ => "Fixed precision mode"
        };
    }

    private string GetPrecisionTooltip(string option)
    {
        return option switch
        {
            "Auto" => "Automatic precision. Integers are treated as exact when mixed with decimals.",
            "Full" => "Result precision matches the input with higher precision.",
            _ when option.EndsWith("K") => $"Fixed {option} ({int.Parse(option.TrimEnd('K')) * 1024:N0} bits)",
            _ when option.EndsWith("M") => $"Fixed {option} ({int.Parse(option.TrimEnd('M')) * 1024 * 1024:N0} bits)",
            _ => $"Fixed {option}-bit precision"
        };
    }

    private string ExtractResultValue(string historyEntry)
    {
        var equalIndex = historyEntry.LastIndexOf(" = ");
        if (equalIndex == -1) return "";

        var resultPart = historyEntry.Substring(equalIndex + 3);
        // Remove precision info [...]
        var bracketIndex = resultPart.LastIndexOf(" [");
        if (bracketIndex != -1)
            resultPart = resultPart.Substring(0, bracketIndex);

        // Remove base prefixes
        if (resultPart.StartsWith("0b")) return resultPart.Substring(2);
        if (resultPart.StartsWith("0x")) return resultPart.Substring(2);
        return resultPart;
    }


    private void ClearHistory()
    {
        resultHistories.Clear();
        StateHasChanged();
    }

    private void ClearAll()
    {
        inputAString = "0";
        inputBString = "0";
        resultString = "0";
        inputA = inputB = result = 0;
        inputAInvalidFormat = inputBInvalidFormat = false;
        hasCalculationError = false;
        errorMessage = "";
        StateHasChanged();
    }

    private void SwapInputs()
    {
        if (NeedsB)
        {
            (inputAString, inputBString) = (inputBString, inputAString);
            (inputAType, inputBType) = (inputBType, inputAType);
            (inputATypeIcon, inputBTypeIcon) = (inputBTypeIcon, inputATypeIcon);
            _ = CalculateAsync("");
        }
    }

    private void CopyResultToA()
    {
        if (!string.IsNullOrEmpty(resultString) && resultString != "Error")
        {
            inputAString = ExtractResultValue($"dummy = {resultString}");
            inputAType = resultType;
            inputATypeIcon = resultTypeIcon;
            _ = CalculateAsync("");
        }
    }



    // Replace the existing CopyResultToClipboard method
    private async Task CopyResultToClipboard()
    {
        if (string.IsNullOrEmpty(resultString) || resultString == "Error")
        {
            Snackbar.Add("No valid result to copy", Severity.Warning);
            return;
        }

        try
        {
            // Modern clipboard API (preferred)
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", resultString);
            Snackbar.Add("Result copied to clipboard!", Severity.Success);
        }
        catch (JSException)
        {
            try
            {
                // Fallback for older browsers
                await JSRuntime.InvokeVoidAsync("fallbackCopyToClipboard", resultString);
                Snackbar.Add("Result copied to clipboard!", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to copy: {ex.Message}", Severity.Error);
            }
        }

        // StateHasChanged() not needed here since we're not modifying component state
        // The snackbar notifications handle user feedback
    }

    // Base conversion icons and handlers
    const string HexIcon = """"
        <svg width="24" height="24" viewBox="0 0 24 24">
          <circle cx="12" cy="12" r="11" fill="#fdf2f2" stroke="#e74c3c" stroke-width="1.5"/>
          <text x="12" y="9" font-family="monospace" font-size="8" font-weight="bold" fill="#c0392b" text-anchor="middle">0x</text>
          <text x="12" y="18" font-family="monospace" font-size="7" font-weight="bold" fill="#e74c3c" text-anchor="middle">FF</text>
        </svg>
        """";

    const string BinIcon = """"
        <svg width="24" height="24" viewBox="0 0 24 24">
          <circle cx="12" cy="12" r="11" fill="#f0f8ff" stroke="#3498db" stroke-width="1.5"/>
          <text x="12" y="10" font-family="monospace" font-size="7" font-weight="bold" fill="#2980b9" text-anchor="middle">101</text>
          <text x="12" y="18" font-family="monospace" font-size="7" font-weight="bold" fill="#3498db" text-anchor="middle">011</text>
        </svg>
        """";

    const string DecIcon = """"
        <svg width="24" height="24" viewBox="0 0 24 24">
          <circle cx="12" cy="12" r="11" fill="#f0fff4" stroke="#27ae60" stroke-width="1.5"/>
          <text x="12" y="16" font-family="monospace" font-size="10" font-weight="bold" fill="#229954" text-anchor="middle">123</text>
        </svg>
        """";

    string inputATypeIcon = DecIcon;
    string inputBTypeIcon = DecIcon;
    string resultTypeIcon = DecIcon;

    void InputABaseSelectClick()
    {
        BigFloat parsedValue = default;

        // Try to parse current value with current base
        bool canParse = inputAType switch
        {
            Base.Bin => BigFloat.TryParseBinary(inputAString?.Trim() ?? "", out parsedValue),
            Base.Dec => BigFloat.TryParseDecimal(inputAString?.Trim() ?? "", out parsedValue),
            Base.Hex => BigFloat.TryParseHex(inputAString?.Trim() ?? "", out parsedValue),
            _ => false
        };

        // Change to next base
        inputAType = inputAType switch
        {
            Base.Dec => Base.Hex,
            Base.Hex => Base.Bin,
            Base.Bin => Base.Dec,
            _ => Base.Dec
        };

        if (canParse)
        {
            // Convert to new base representation
            inputAString = inputAType switch
            {
                Base.Bin => parsedValue.ToBinaryString(),
                Base.Dec => parsedValue.ToString(),
                Base.Hex => parsedValue.ToHexString(),
                _ => parsedValue.ToString()
            };
        }
        else if (!string.IsNullOrWhiteSpace(inputAString) && inputAString != "0")
        {
            // If can't parse and there's content, clear invalid input
            inputAString = "0";
        }
        // If can't parse, leave inputAString unchanged but still change the base type

        // Update icon
        inputATypeIcon = inputAType switch
        {
            Base.Dec => DecIcon,
            Base.Hex => HexIcon,
            Base.Bin => BinIcon,
            _ => DecIcon
        };

        _ = CalculateAsync("");
    }

    void InputBBaseSelectClick()
    {
        BigFloat parsedValue = default;

        // Try to parse current value with current base
        bool canParse = inputBType switch
        {
            Base.Bin => BigFloat.TryParseBinary(inputBString?.Trim() ?? "", out parsedValue),
            Base.Dec => BigFloat.TryParseDecimal(inputBString?.Trim() ?? "", out parsedValue),
            Base.Hex => BigFloat.TryParseHex(inputBString?.Trim() ?? "", out parsedValue),
            _ => false
        };

        // Change to next base
        inputBType = inputBType switch
        {
            Base.Dec => Base.Hex,
            Base.Hex => Base.Bin,
            Base.Bin => Base.Dec,
            _ => Base.Dec
        };

        if (canParse)
        {
            // Convert to new base representation
            inputBString = inputBType switch
            {
                Base.Bin => parsedValue.ToBinaryString(),
                Base.Dec => parsedValue.ToString(),
                Base.Hex => parsedValue.ToHexString(),
                _ => parsedValue.ToString()
            };
        }
        else if (!string.IsNullOrWhiteSpace(inputBString) && inputBString != "0")
        {
            // If can't parse and there's content, clear invalid input
            inputBString = "0";
        }
        // If can't parse, leave inputBString unchanged but still change the base type

        // Update icon
        inputBTypeIcon = inputBType switch
        {
            Base.Dec => DecIcon,
            Base.Hex => HexIcon,
            Base.Bin => BinIcon,
            _ => DecIcon
        };

        _ = CalculateAsync("");
    }

    void ResultBaseSelectClick()
    {
        // For results, we can directly use the stored result value for conversion
        // Change to next base
        resultType = resultType switch
        {
            Base.Dec => Base.Hex,
            Base.Hex => Base.Bin,
            Base.Bin => Base.Dec,
            _ => Base.Dec
        };

        // Convert result to new base representation if we have a valid result
        if (result != 0 || resultString == "0")
        {
            resultString = resultType switch
            {
                Base.Bin => result.ToBinaryString(),
                Base.Dec => result.ToString(),
                Base.Hex => result.ToHexString(),
                _ => result.ToString()
            };
        }

        // Update icon
        resultTypeIcon = resultType switch
        {
            Base.Dec => DecIcon,
            Base.Hex => HexIcon,
            Base.Bin => BinIcon,
            _ => DecIcon
        };

        // No need to recalculate for result conversion, just update the display
        StateHasChanged();
    }
}